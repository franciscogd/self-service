###
# 
# ============================================================================
#
# Copyright (C) 2014 Talend Inc. - www.talend.com
#
# This source code is available under agreement available at
# %InstallDIR%\license.txt
#
# You should have received a copy of the agreement
# along with this program; if not, write to Talend SA
# 9 rue Pages 92150 Suresnes, France
#
# ============================================================================ 
#
###

#
# Comma separated list of features repositories to register by default
#
featuresRepositories = \
    mvn:org.apache.karaf.features/spring-legacy/4.1.1/xml/features, \
    mvn:org.apache.karaf.features/standard/4.1.1/xml/features, \
    mvn:org.apache.karaf.features/framework/4.1.1/xml/features, \
    mvn:org.apache.karaf.features/enterprise/4.1.1/xml/features, \
    mvn:org.apache.camel.karaf/apache-camel/2.17.6/xml/features, \
    mvn:org.apache.cxf.karaf/apache-cxf/3.1.11/xml/features, \
    mvn:org.apache.activemq/activemq-karaf/5.14.5/xml/features-core, \
    mvn:org.talend.esb.event-logging/event-logging-features/6.4.1/xml, \
    mvn:org.talend.esb/features/6.4.1/xml, \
    mvn:org.talend.ipaas.rt/ipaas-common-features/2.0.1/xml, \
    mvn:org.talend.ipaas.rt/ipaas-flow-features/2.0.1/xml, \
    mvn:org.talend.transform/features/6.4.1/xml, \
    mvn:org.talend/org.talend.jobserver.karaf.feature/6.4.1/xml

tipaas.karaf.featuresBoot.extra = tipaas-pairing-agent
#tipaas.karaf.featuresBoot.extra = tipaas-cloud-engine

#
# Comma separated list of features to install at startup
#
featuresBoot = (instance, package, log, ssh, aries-blueprint, framework, system, feature, shell, management, service, jaas, shell-compat, deployer, diagnostic, wrap, bundle, config, kar), camel, tipaas-amq-dependencies, talend-job-server, talend-job-server-client, ${tipaas.karaf.featuresBoot.extra}

#
# Resource repositories (OBR) that the features resolver can use
# to resolve requirements/capabilities
#
# The format of the resourceRepositories is 
# resourceRepositories=[xml:url|json:url],...
# for Instance:
#
#resourceRepositories=xml:http://host/path/to/index.xml
# or
#resourceRepositories=json:http://host/path/to/index.json
#

#
# Defines if the boot features are started in asynchronous mode (in a dedicated thread)
#
featuresBootAsynchronous=false

#
# Service requirements enforcement
#
# By default, the feature resolver checks the service requirements/capabilities of
# bundles for new features (xml schema >= 1.3.0) in order to automatically installs
# the required bundles.
# The following flag can have those values:
#   - disable: service requirements are completely ignored
#   - default: service requirements are ignored for old features
#   - enforce: service requirements are always verified
#
#serviceRequirements=default

#
# Store cfg file for config element in feature
#
#configCfgStore=true

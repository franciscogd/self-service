# Unique agentID (string)
agent.id=agent1

# The location of file system used to persist the audit sequence number
agent.sequence.dir=./esbrepo/audit-sequence

#agent.receiver.custom.routeid.default=myCustomReceiverRoute
#agent.receiver.custom.routeid.audit=myCustomReceiverRoute
#agent.receiver.custom.routeid.security=myCustomReceiverSecurityRoute

# Receiver buffer configuration
# for 'agent.buffer.jms.queue' (and only for it) it's possible to
# reuse other property values defined in this file by closing the
# property name between ${ and }. For example:
#     agentid=some-agent-id
#     agent.buffer.jms.queue=event.logging.${agentid}.cache
# will be interpreted by EL as 'event.logging.some-agent-id.cache'
agent.buffer.jms.url=vm://eventloggingbroker?create=true&broker.useJmx=false&broker.persistent=true
agent.buffer.jms.queue=event.logging.${agentid}.cache
agent.buffer.jms.username=tadmin
agent.buffer.jms.password=tadmin

# By default, all events will be sent via a memory buffer but the user can change this
# and configure to use jms instead for audit event and for other event categories.
agent.receiver.buffer.default=memory
#agent.receiver.buffer.audit=jms
#agent.receiver.buffer.security=jms

# Configuration for custom route processing
#agent.processing.custom.routeid.default=myCustomProcRoute
#agent.processing.custom.routeid.audit=myCustomProcRoute
#agent.processing.custom.routeid.security=myCustomProcSecurityRoute

# Signing events default configuration
agent.processing.signing.default=false
# configuration for signing audit events.
agent.processing.signing.audit=true
# configuration for signing events with security category
#agent.processing.signing.security=true

# A default local keystore (trun.jks) is provided for the private key, that will be used to sign the events
agent.signing.keystore.properties =./etc/keystores/trunKeystore.properties

# The Event Logging Sender is responsible to get the messages from the processing part of the Agent and send them to the final destination which can be either a JMS Broker Queue or the Event Logging Collector Service
agent.sender.destination.default=eventlogsenderrest
#agent.sender.destination.audit=eventlogsenderjms
#agent.sender.destination.security=eventlogsenderjms

#********************************************************************************************#
#********************************** Event Enrichment ****************************************#
#********************************************************************************************#

# Used to map an attribute to the Subject property in the Event. User can 
# provide this value in the logs as attributes (e.g. for log events as MDC attribute)
event.map.subject = Subject
# Take correlation from custom_Info using the below key
event.map.correlationid = CorrelationID

# Adding static log event attributes to all log messages processed within this agent.
# Format: event.add.[attribute-name] = [value]
# Values defined here will override any previously existing values within the log event.
# Currently only event.add.logSource.[sub-attribute] and event.add.customInfo.[sub-attribute] is supported.
#event.add.logSource.country=Germany
#event.add.logSource.city=Bonn
#event.add.customInfo.projectID=POC Talend ESB

# Removing log event attributes from all log messages processed within this agent.
# This feature is especially helpful if you need to remove (customInfo) MDC properties from 3rd party components.
# Format: event.remove.[attribute-name]
# Currently only event.remove.logSource.[sub-attribute] and event.remove.customInfo.[sub-attribute] is supported.
#event.remove.logSource.class.name
#event.remove.customInfo.activemq.broker